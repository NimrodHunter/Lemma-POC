/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ChainLinkConsumer,
  ChainLinkConsumerInterface,
} from "../ChainLinkConsumer";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50600060208190527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb580546001600160a01b0319908116738fffffd4afb6115b954bd326cbe7b4ba576818f61790915560019091527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d8054909116735f4ec3df9cbd43714fe2740f5e3616155c5b841917905560168060af6000396000f3fe6080604052600080fdfea164736f6c6343000809000a";

type ChainLinkConsumerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChainLinkConsumerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChainLinkConsumer__factory extends ContractFactory {
  constructor(...args: ChainLinkConsumerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ChainLinkConsumer";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ChainLinkConsumer> {
    return super.deploy(overrides || {}) as Promise<ChainLinkConsumer>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ChainLinkConsumer {
    return super.attach(address) as ChainLinkConsumer;
  }
  connect(signer: Signer): ChainLinkConsumer__factory {
    return super.connect(signer) as ChainLinkConsumer__factory;
  }
  static readonly contractName: "ChainLinkConsumer";
  public readonly contractName: "ChainLinkConsumer";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChainLinkConsumerInterface {
    return new utils.Interface(_abi) as ChainLinkConsumerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChainLinkConsumer {
    return new Contract(address, _abi, signerOrProvider) as ChainLinkConsumer;
  }
}
